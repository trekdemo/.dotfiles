# vim: ft=conf fdm=marker ft=tmux

# Use something easier to type as the prefix.
unbind C-b
set -g prefix C-a
bind-key -r C-a send-prefix

set -g default-shell /bin/zsh

# ESC in tmux or GNU Screen is delayed
# https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
set-option -sg escape-time 10

set-option -ga status-position top
set-option -g status-keys "emacs"
set-option -g base-index 1
set-option -g renumber-windows on
set-option -s default-terminal "xterm-kitty"
set-option -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set-option -g focus-events on
set-option -g mode-keys vi

# Needed for tools like yazi to display images
set-option -g allow-passthrough on
set-option -ga update-environment TERM
set-option -ga update-environment TERM_PROGRAM

# ~ Mouse ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set-option -g mouse on

# Click on the session's name to switch between them
bind -n MouseDown1StatusLeft display-popup -E 'tmux-sessionizer'

# ~ Shortcuts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bind-key -N "Reload configuration" R source-file ~/.tmux.conf \; display-message "Configuration reloaded."

# Open current directory
bind-key o run-shell "open #{pane_current_path}"
bind-key s display-popup -E "tmux-sessionizer"
bind-key H display-popup "$HOME/bin/cht.sh"
bind-key N display-popup -E -w 80% -h 80% -e EDITOR="nvr --remote" "yazi"
bind-key g new-window -c "#{pane_current_path}" -e EDITOR="nvr --remote" "lazygit"

# ~ Pane & Session control ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Choose window/session
#   C-a s          choose a session from a list
#   C-a L          ‘last’ (previously used) session
#   C-a K          kill session and switch to next
# bind-key -n M-c new-window -c '#{pane_current_path}'
# bind-key -n M-p previous-window
# bind-key -n M-n next-window
bind-key c new-window -c "#{pane_current_path}"
bind-key S new-session \; command-prompt "rename-session '%%'"
bind-key , command-prompt "rename-window '%%'"
bind-key < command-prompt "rename-session '%%'"
bind-key = list-sessions
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# Move windows
bind-key -n C-S-Left swap-window -t -1\; select-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

# Resizing panes
bind-key -r Left  resize-pane -L 5
bind-key -r Down  resize-pane -D 5
bind-key -r Up    resize-pane -U 5
bind-key -r Right resize-pane -R 5

# Flipping the orientation of the current pane with the pane <arrow-way>-of
bind -n S-Up    move-pane -h -t '.{up-of}'
bind -n S-Right move-pane -t    '.{right-of}'
bind -n S-Left  move-pane -t    '.{left-of}'
bind -n S-down  move-pane -h -t '.{down-of}'

# Splitting panes
#   C-a |          split current pane horizontally
#   C-a -          split current pane vertically
bind-key "|" split-window -h -c "#{pane_current_path}"
bind-key "-" split-window -v -c "#{pane_current_path}"

bind-key -n M-n split-window -h -c "#{pane_current_path}" \; select-layout -E
bind-key -n M-x kill-pane
bind-key -n M-[ previous-layout
bind-key -n M-] next-layout
bind-key -n M-t new-window -c "#{pane_current_path}"

# Managing panes
#   C-a B          Move pane to a new window
#   C-a J          Join panes from target window into current window
#   C-a W          Swap current pane with target
bind-key B break-pane -d
bind-key J command-prompt -p "Join pane from: "  "join-pane -h -s '%%'"
bind-key W display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"
unbind Enter
bind Enter resize-pane -Z
bind C-Enter resize-pane -Z


# Navigation
#   prefix + h and prefix + M-h
#   prefix + j and prefix + M-j
#   prefix + k and prefix + M-k
#   prefix + l and prefix + M-l
# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind-key    h   select-pane -L
bind-key -n M-h select-pane -L
# bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind-key -n C-Left if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key    j   select-pane -D
bind-key -n M-j select-pane -D
# bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind-key -n C-Down if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key    k   select-pane -U
bind-key -n M-k select-pane -U
# bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind-key -n C-Up if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key    l   select-pane -R
bind-key -n M-l select-pane -R
# bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind-key -n C-Right if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# ~ Vim Copy selection ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# bind-key ESCAPE copy-mode
bind-key -T copy-mode-vi 'H' send -X start-of-line
bind-key -T copy-mode-vi 'L' send -X end-of-line
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

source-file ~/.tmux/theme.conf

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'MunifTanjim/tmux-mode-indicator'
set -g @plugin 'sainnhe/tmux-fzf'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
